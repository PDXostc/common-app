/**
Details. 
\brief Allows access to the MOST API 
*/

module Most {

[NoInterfaceObject]
interface MostError { 
	/**  code
	 *   MUST return error code. 
	 **/
	attribute unsigned short code;

	/**  message
	 *   MUST return error message 
	 **/
	attribute DOMString message;
};

typedef DOMString PersonId;
typedef DOMString ContactId;
typedef DOMString ContactGroupId;

[NoInterfaceObject]
interface ContactName {
    attribute DOMString? prefix;
    attribute DOMString? suffix;
    attribute DOMString? firstName;
    attribute DOMString? middleName;
    attribute DOMString? lastName;
    attribute DOMString[] nicknames;
    attribute DOMString? phoneticFirstName;
    attribute DOMString? phoneticLastName;
    readonly attribute DOMString? displayName;
};

[NoInterfaceObject]
interface ContactAddress {
    attribute DOMString? country;
    attribute DOMString? region;
    attribute DOMString? city;
    attribute DOMString? streetAddress;
    attribute DOMString? additionalInformation;
    attribute DOMString? postalCode;
    attribute boolean isDefault;
    attribute DOMString[] types;
};

[NoInterfaceObject]
interface ContactPhoneNumber {
    attribute DOMString number;
    attribute boolean isDefault;
    attribute DOMString[] types;
};

[NoInterfaceObject]
interface ContactEmailAddress {
    attribute DOMString email;
    attribute boolean isDefault;
    attribute DOMString[] types;
};

[NoInterfaceObject]
interface ContactAnniversary {
    attribute Date date;
    attribute DOMString? label;
};

[NoInterfaceObject]
interface ContactOrganization {
    attribute DOMString? name;
    attribute DOMString? department;
    attribute DOMString? title;
    attribute DOMString? role;
    attribute DOMString? logoURI;
};

[NoInterfaceObject]
interface ContactWebSite {
    attribute DOMString url;
    attribute DOMString type;
};

[NoInterfaceObject]
interface Contact {
    readonly attribute ContactId? id;
    readonly attribute PersonId? personId;
    readonly attribute AddressBookId? addressBookId;
    readonly attribute Date? lastUpdated;
    readonly attribute boolean isFavorite;
    attribute DOMString? photoURI;
    attribute ContactPhoneNumber[] phoneNumbers;
    attribute ContactEmailAddress[] emails;
    attribute Date? birthday;
    attribute ContactAnniversary[] anniversaries;
    attribute ContactOrganization[] organizations;
    attribute DOMString[] notes;
    attribute ContactWebSite[] urls;
    attribute DOMString? ringtoneURI;
    attribute ContactGroupId[] groupIds;
    //DOMString convertToString(optional ContactTextFormat? format);
    //Contact clone();
};

[NoInterfaceObject]
interface RemoteParty {
    readonly attribute DOMString? remoteParty;
    readonly attribute PersonId? personId;
};

[NoInterfaceObject]
interface CallHistoryEntry {
    readonly attribute DOMString uid;
    readonly attribute DOMString type;
    readonly attribute DOMString[]? features;
    readonly attribute RemoteParty[] remoteParties;
    readonly attribute Date startTime;
    readonly attribute unsigned long duration;
    readonly attribute DOMString direction;
};

callback MostErrorCallback = void (MostError error); 
callback GetContactsCallback = void (Contact[] contacts);
callback GetCallHistoryCallback = void (CallHistoryEntry[] entries);

[NoInterfaceObject]
interface Most  { 

	/**  
	 *  \brief Invoke phone call on BT paired device  
	 *  \arg DOMString str init string
	 *  \arg PhoneErrorCallback errorCallback. Callback if an error has occurred
	**/
        initMost(DOMString str);

};

};
